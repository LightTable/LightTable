// Compiled by ClojureScript 1.10.844 {}
goog.provide('lt.util.dom');
goog.require('cljs.core');
/**
 * Return lazy seq of NodeList.
 */
lt.util.dom.lazy_nl_via_item = (function lt$util$dom$lazy_nl_via_item(var_args){
var G__4842 = arguments.length;
switch (G__4842) {
case 1:
return lt.util.dom.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return lt.util.dom.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(lt.util.dom.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = (function (nl){
return lt.util.dom.lazy_nl_via_item.call(null,nl,(0));
}));

(lt.util.dom.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = (function (nl,n){
if((n < nl.length)){
return (new cljs.core.LazySeq(null,(function (){
return cljs.core.cons.call(null,nl.item(n),lt.util.dom.lazy_nl_via_item.call(null,nl,(n + (1))));
}),null,null));
} else {
return null;
}
}));

(lt.util.dom.lazy_nl_via_item.cljs$lang$maxFixedArity = 2);

(HTMLCollection.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL);

(HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this$__$1 = this;
return lt.util.dom.lazy_nl_via_item.call(null,this$__$1);
}));

(HTMLCollection.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL);

(HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = (function (this$){
var this$__$1 = this;
return this$__$1.length;
}));

(HTMLCollection.prototype.cljs$core$IIndexed$ = cljs.core.PROTOCOL_SENTINEL);

(HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (this$,n){
var this$__$1 = this;
return this$__$1.item(n);
}));

(HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (this$,n,not_found){
var this$__$1 = this;
var or__4160__auto__ = this$__$1.item(n);
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
return not_found;
}
}));
(NodeList.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL);

(NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
var this$__$1 = this;
return lt.util.dom.lazy_nl_via_item.call(null,this$__$1);
}));

(NodeList.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL);

(NodeList.prototype.cljs$core$ICounted$_count$arity$1 = (function (this$){
var this$__$1 = this;
return this$__$1.length;
}));

(NodeList.prototype.cljs$core$IIndexed$ = cljs.core.PROTOCOL_SENTINEL);

(NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (this$,n){
var this$__$1 = this;
return this$__$1.item(n);
}));

(NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (this$,n,not_found){
var this$__$1 = this;
var or__4160__auto__ = this$__$1.item(n);
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
return not_found;
}
}));
/**
 * Create a text node containing string `text`.
 */
lt.util.dom.text_node = (function lt$util$dom$text_node(text){
return document.createTextNode(text);
});
/**
 * Returns a NodeList of all elements within `elem` that match `query`.
 * 
 *   If `elem` is not specified then the entire document is used.
 */
lt.util.dom.$$ = (function lt$util$dom$$$(var_args){
var G__4845 = arguments.length;
switch (G__4845) {
case 1:
return lt.util.dom.$$.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return lt.util.dom.$$.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(lt.util.dom.$$.cljs$core$IFn$_invoke$arity$1 = (function (query){
return lt.util.dom.$$.call(null,query,document);
}));

(lt.util.dom.$$.cljs$core$IFn$_invoke$arity$2 = (function (query,elem){
return elem.querySelectorAll(cljs.core.name.call(null,query));
}));

(lt.util.dom.$$.cljs$lang$maxFixedArity = 2);

/**
 * Returns the first element found within `elem` that matches `query`.
 * 
 *   If `elem` is not specified then the entire document is used.
 * 
 *   Example:
 *   ```
 *   ;; Assume there exists a div such as:
 *   ;; <div class="tabsets">
 * 
 *   ($ "div .tabsets")
 *   ;;=> #<[object HTMLDivElement]>
 *   ```
 */
lt.util.dom.$ = (function lt$util$dom$$(var_args){
var G__4848 = arguments.length;
switch (G__4848) {
case 1:
return lt.util.dom.$.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return lt.util.dom.$.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(lt.util.dom.$.cljs$core$IFn$_invoke$arity$1 = (function (query){
return lt.util.dom.$.call(null,query,document);
}));

(lt.util.dom.$.cljs$core$IFn$_invoke$arity$2 = (function (query,elem){
return elem.querySelector(cljs.core.name.call(null,query));
}));

(lt.util.dom.$.cljs$lang$maxFixedArity = 2);

/**
 * Append `child` to the `parent` as a child node. If `child` already exists
 *   as a node then it is moved to the new location.
 * 
 *   Returns `parent`.
 */
lt.util.dom.append = (function lt$util$dom$append(parent,child){
parent.appendChild(child);

return parent;
});
/**
 * Insert `child` as the first child node of `parent`, if there already exist children nodes.
 *   Otherwise, [[append]] `child`.
 */
lt.util.dom.prepend = (function lt$util$dom$prepend(parent,child){
if(cljs.core.truth_(parent.firstChild)){
return parent.insertBefore(child,parent.firstChild);
} else {
return lt.util.dom.append.call(null,parent,child);
}
});
/**
 * Add `class` to the classList of `elem`.
 */
lt.util.dom.add_class = (function lt$util$dom$add_class(elem,class$){
if(cljs.core.truth_((function (){var and__4149__auto__ = elem;
if(cljs.core.truth_(and__4149__auto__)){
return (!(cljs.core.empty_QMARK_.call(null,cljs.core.name.call(null,class$))));
} else {
return and__4149__auto__;
}
})())){
return elem.classList.add(cljs.core.name.call(null,class$));
} else {
return null;
}
});
/**
 * Remove `class` from the classList of `elem`.
 */
lt.util.dom.remove_class = (function lt$util$dom$remove_class(elem,class$){
if(cljs.core.truth_((function (){var and__4149__auto__ = elem;
if(cljs.core.truth_(and__4149__auto__)){
return (!(cljs.core.empty_QMARK_.call(null,cljs.core.name.call(null,class$))));
} else {
return and__4149__auto__;
}
})())){
return elem.classList.remove(cljs.core.name.call(null,class$));
} else {
return null;
}
});
/**
 * True when `elem` has `class` in its classList.
 */
lt.util.dom.has_class_QMARK_ = (function lt$util$dom$has_class_QMARK_(elem,class$){
if(cljs.core.truth_((function (){var and__4149__auto__ = elem;
if(cljs.core.truth_(and__4149__auto__)){
return (!(cljs.core.empty_QMARK_.call(null,cljs.core.name.call(null,class$))));
} else {
return and__4149__auto__;
}
})())){
return elem.classList.contains(cljs.core.name.call(null,class$));
} else {
return null;
}
});
/**
 * If `elem` has `class` then remove `class`. Otherwise, `class` is added to `elem`.
 */
lt.util.dom.toggle_class = (function lt$util$dom$toggle_class(elem,class$){
if(cljs.core.truth_(lt.util.dom.has_class_QMARK_.call(null,elem,class$))){
return lt.util.dom.remove_class.call(null,elem,class$);
} else {
return lt.util.dom.add_class.call(null,elem,class$);
}
});
/**
 * Add each key-value pair in `things` to `elem`'s style.
 * 
 *   Returns `nil`, if change was successful.
 * 
 *   Example:
 *   ```
 *   ;; Assume there exists a div such as:
 *   ;; <div class="tabsets" style="bottom: 34px;">
 * 
 *   ;; Returns nil, but makes the change.
 *   (dom/set-css ($ "div") {"bottom" "50px"})
 *   ;;=> nil
 *   ;; div is now: <div class="tabsets" style="bottom: 50px;">
 *   ```
 */
lt.util.dom.set_css = (function lt$util$dom$set_css(elem,things){
var seq__4850 = cljs.core.seq.call(null,things);
var chunk__4851 = null;
var count__4852 = (0);
var i__4853 = (0);
while(true){
if((i__4853 < count__4852)){
var vec__4860 = cljs.core._nth.call(null,chunk__4851,i__4853);
var k = cljs.core.nth.call(null,vec__4860,(0),null);
var v = cljs.core.nth.call(null,vec__4860,(1),null);
(elem.style[cljs.core.name.call(null,k)] = (((v instanceof cljs.core.Keyword))?cljs.core.name.call(null,v):v));


var G__4866 = seq__4850;
var G__4867 = chunk__4851;
var G__4868 = count__4852;
var G__4869 = (i__4853 + (1));
seq__4850 = G__4866;
chunk__4851 = G__4867;
count__4852 = G__4868;
i__4853 = G__4869;
continue;
} else {
var temp__5753__auto__ = cljs.core.seq.call(null,seq__4850);
if(temp__5753__auto__){
var seq__4850__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__4850__$1)){
var c__4591__auto__ = cljs.core.chunk_first.call(null,seq__4850__$1);
var G__4870 = cljs.core.chunk_rest.call(null,seq__4850__$1);
var G__4871 = c__4591__auto__;
var G__4872 = cljs.core.count.call(null,c__4591__auto__);
var G__4873 = (0);
seq__4850 = G__4870;
chunk__4851 = G__4871;
count__4852 = G__4872;
i__4853 = G__4873;
continue;
} else {
var vec__4863 = cljs.core.first.call(null,seq__4850__$1);
var k = cljs.core.nth.call(null,vec__4863,(0),null);
var v = cljs.core.nth.call(null,vec__4863,(1),null);
(elem.style[cljs.core.name.call(null,k)] = (((v instanceof cljs.core.Keyword))?cljs.core.name.call(null,v):v));


var G__4874 = cljs.core.next.call(null,seq__4850__$1);
var G__4875 = null;
var G__4876 = (0);
var G__4877 = (0);
seq__4850 = G__4874;
chunk__4851 = G__4875;
count__4852 = G__4876;
i__4853 = G__4877;
continue;
}
} else {
return null;
}
}
break;
}
});
/**
 * If `things` is a map, sets the CSS of `elem` via [[set-css]]. Otherwise,
 *   returns what is located at key `things` in `elem`.
 * 
 *   Example:
 *   ```
 *   ;; Assume there exists a div such as:
 *   ;; <div class="tabsets" style="bottom: 34px;">
 * 
 *   (css ($ "div .tabsets") :bottom)
 *   ;;=> "34px"
 * 
 *   ;; Returns nil, but makes the change.
 *   (css ($ "div .tabsets") {"bottom" "50px"})
 *   ;;=> nil
 * 
 *   (css ($ "div .tabsets") "bottom")
 *   ;;=> "50px"
 *   ```
 */
lt.util.dom.css = (function lt$util$dom$css(elem,things){
var things__$1 = ((cljs.core._EQ_.call(null,Object,cljs.core.type.call(null,things)))?cljs.core.js__GT_clj.call(null,things):things);
if(cljs.core.map_QMARK_.call(null,things__$1)){
return lt.util.dom.set_css.call(null,elem,things__$1);
} else {
return (elem.style[cljs.core.name.call(null,things__$1)]);
}
});
/**
 * Add each key-value pair in `things` to `elem`'s attributes.
 * 
 *   Returns `nil`, if change was successful.
 * 
 *   Example:
 *   ```
 *   ;; Assume there exists a div such as:
 *   ;; <div class="tabsets">
 * 
 *   ;; Returns nil, but makes the change.
 *   (dom/set-attr ($ "div .tabsets") {:draggable "true"})
 *   ;;=> nil
 *   ;; div is now: <div class="tabsets" draggable="true";>
 *   ```
 */
lt.util.dom.set_attr = (function lt$util$dom$set_attr(elem,things){
var seq__4878 = cljs.core.seq.call(null,things);
var chunk__4879 = null;
var count__4880 = (0);
var i__4881 = (0);
while(true){
if((i__4881 < count__4880)){
var vec__4888 = cljs.core._nth.call(null,chunk__4879,i__4881);
var k = cljs.core.nth.call(null,vec__4888,(0),null);
var v = cljs.core.nth.call(null,vec__4888,(1),null);
elem.setAttribute(cljs.core.name.call(null,k),(((v instanceof cljs.core.Keyword))?cljs.core.name.call(null,v):v));


var G__4894 = seq__4878;
var G__4895 = chunk__4879;
var G__4896 = count__4880;
var G__4897 = (i__4881 + (1));
seq__4878 = G__4894;
chunk__4879 = G__4895;
count__4880 = G__4896;
i__4881 = G__4897;
continue;
} else {
var temp__5753__auto__ = cljs.core.seq.call(null,seq__4878);
if(temp__5753__auto__){
var seq__4878__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__4878__$1)){
var c__4591__auto__ = cljs.core.chunk_first.call(null,seq__4878__$1);
var G__4898 = cljs.core.chunk_rest.call(null,seq__4878__$1);
var G__4899 = c__4591__auto__;
var G__4900 = cljs.core.count.call(null,c__4591__auto__);
var G__4901 = (0);
seq__4878 = G__4898;
chunk__4879 = G__4899;
count__4880 = G__4900;
i__4881 = G__4901;
continue;
} else {
var vec__4891 = cljs.core.first.call(null,seq__4878__$1);
var k = cljs.core.nth.call(null,vec__4891,(0),null);
var v = cljs.core.nth.call(null,vec__4891,(1),null);
elem.setAttribute(cljs.core.name.call(null,k),(((v instanceof cljs.core.Keyword))?cljs.core.name.call(null,v):v));


var G__4902 = cljs.core.next.call(null,seq__4878__$1);
var G__4903 = null;
var G__4904 = (0);
var G__4905 = (0);
seq__4878 = G__4902;
chunk__4879 = G__4903;
count__4880 = G__4904;
i__4881 = G__4905;
continue;
}
} else {
return null;
}
}
break;
}
});
/**
 * If `things` is a map, sets the attributes of `elem` via [[set-attr]]. Otherwise, returns
 *   what is located at key `things` in `elem`.
 * 
 *   Example:
 *   ```
 *   ;; Assume there exists a div such as:
 *   ;; <div class="tabsets" draggable="true";>
 * 
 *   (attr ($ "div .tabsets") "draggable")
 *   ;;=> "true"
 * 
 *   ;; Returns nil, but makes the change.
 *   (attr ($ "div .tabsets") {"draggable" "false"})
 *   ;;=> nil
 * 
 *   (attr ($ "div .tabsets") "draggable")
 *   ;;=> "false"
 *   ```
 */
lt.util.dom.attr = (function lt$util$dom$attr(elem,things){
if(cljs.core.map_QMARK_.call(null,things)){
return lt.util.dom.set_attr.call(null,elem,things);
} else {
return elem.getAttribute(cljs.core.name.call(null,things));
}
});
/**
 * Return the parent node of `elem`.
 * 
 *   Note: using `parent` on the document node will result in a type error.
 * 
 *   Example:
 *   ```
 *   (parent ($ "body"))
 *   ;;=> #<[object HTMLHtmlElement]>
 * 
 *   (.-nodeName (parent ($ "body")))
 *   ;;=> "HTML"
 *   ```
 */
lt.util.dom.parent = (function lt$util$dom$parent(elem){
return elem.parentNode;
});
/**
 * Return the child nodes of `elem`.
 */
lt.util.dom.children = (function lt$util$dom$children(elem){
return elem.children;
});
/**
 * Remove `elem` from the DOM tree.
 */
lt.util.dom.remove = (function lt$util$dom$remove(elem){
var temp__5753__auto__ = lt.util.dom.parent.call(null,elem);
if(cljs.core.truth_(temp__5753__auto__)){
var p = temp__5753__auto__;
return p.removeChild(elem);
} else {
return null;
}
});
/**
 * Sets the inner HTML of `elem` to an empty string.
 */
lt.util.dom.empty = (function lt$util$dom$empty(elem){
return (elem.innerHTML = "");
});
/**
 * If `v` is provided then set the value of `elem` to `v`. Otherwise, return the
 *   current value of `elem`.
 */
lt.util.dom.val = (function lt$util$dom$val(var_args){
var args__4777__auto__ = [];
var len__4771__auto___4912 = arguments.length;
var i__4772__auto___4913 = (0);
while(true){
if((i__4772__auto___4913 < len__4771__auto___4912)){
args__4777__auto__.push((arguments[i__4772__auto___4913]));

var G__4914 = (i__4772__auto___4913 + (1));
i__4772__auto___4913 = G__4914;
continue;
} else {
}
break;
}

var argseq__4778__auto__ = ((((1) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((1)),(0),null)):null);
return lt.util.dom.val.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4778__auto__);
});

(lt.util.dom.val.cljs$core$IFn$_invoke$arity$variadic = (function (elem,p__4908){
var vec__4909 = p__4908;
var v = cljs.core.nth.call(null,vec__4909,(0),null);
if(cljs.core.not.call(null,v)){
return elem.value;
} else {
return (elem.value = v);
}
}));

(lt.util.dom.val.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(lt.util.dom.val.cljs$lang$applyTo = (function (seq4906){
var G__4907 = cljs.core.first.call(null,seq4906);
var seq4906__$1 = cljs.core.next.call(null,seq4906);
var self__4758__auto__ = this;
return self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4907,seq4906__$1);
}));

/**
 * Cancel event `e`, if it is cancelable. Does not stop further propagation.
 * 
 *   See [[stop-propagation]].
 */
lt.util.dom.prevent = (function lt$util$dom$prevent(e){
return e.preventDefault();
});
/**
 * Stop further propagation of event `e`.
 * 
 *   See [[prevent]].
 */
lt.util.dom.stop_propagation = (function lt$util$dom$stop_propagation(e){
return e.stopPropagation();
});
/**
 * Return child nodes of `elem`'s parent.
 */
lt.util.dom.siblings = (function lt$util$dom$siblings(elem){
return lt.util.dom.parent.call(null,elem).children;
});
/**
 * Starting with `elem`'s immediate parent going up, returns first parent of
 *   `elem` that has a selector matching `sel` or `nil` if no match is found.
 */
lt.util.dom.parents = (function lt$util$dom$parents(elem,sel){
var root = lt.util.dom.parent.call(null,lt.util.dom.$.call(null,new cljs.core.Keyword(null,"body","body",-2049205669)));
var p = lt.util.dom.parent.call(null,elem);
while(true){
if(cljs.core.truth_((function (){var and__4149__auto__ = p;
if(cljs.core.truth_(and__4149__auto__)){
return cljs.core.not_EQ_.call(null,p,root);
} else {
return and__4149__auto__;
}
})())){
if(cljs.core.truth_(p.webkitMatchesSelector(cljs.core.name.call(null,sel)))){
return p;
} else {
var G__4915 = lt.util.dom.parent.call(null,p);
p = G__4915;
continue;
}
} else {
return null;
}
break;
}
});
/**
 * Returns the next element at the same level of `elem` in the DOM tree.
 *   `nil` if there are no siblings.
 */
lt.util.dom.next = (function lt$util$dom$next(elem){
return elem.nextElementSibling;
});
/**
 * Insert element `neue` into `elem`'s parent in the position before `elem`.
 * 
 *   See [[after]].
 */
lt.util.dom.before = (function lt$util$dom$before(elem,neue){
return lt.util.dom.parent.call(null,elem).insertBefore(neue,elem);
});
/**
 * Insert element `neue` into `elem`'s parent in the position after `elem`.
 * 
 *   See [[before]].
 */
lt.util.dom.after = (function lt$util$dom$after(elem,neue){
var temp__5751__auto__ = lt.util.dom.next.call(null,elem);
if(cljs.core.truth_(temp__5751__auto__)){
var n = temp__5751__auto__;
return lt.util.dom.before.call(null,n,neue);
} else {
return lt.util.dom.append.call(null,lt.util.dom.parent.call(null,elem),neue);
}
});
/**
 * Replace `orig` with `neue`.
 */
lt.util.dom.replace_with = (function lt$util$dom$replace_with(orig,neue){
var temp__5753__auto__ = lt.util.dom.parent.call(null,orig);
if(cljs.core.truth_(temp__5753__auto__)){
var p = temp__5753__auto__;
return p.replaceChild(neue,orig);
} else {
return null;
}
});
/**
 * Returns the height of the visible area for `elem`, in pixels. The value
 *   contains the height with the padding, but it does not include the scrollBar,
 *   border, and the margin.
 */
lt.util.dom.height = (function lt$util$dom$height(elem){
return elem.clientHeight;
});
/**
 * Returns the width of the visible area for `elem`, in pixels. The value
 *   contains the width with the padding, but it does not include the scrollBar,
 *   border, and the margin.
 */
lt.util.dom.width = (function lt$util$dom$width(elem){
return elem.clientWidth;
});
/**
 * Returns, in pixels, whichever is greater, the width of the content within
 *   `elem` or the width of `elem` itself.
 */
lt.util.dom.scroll_width = (function lt$util$dom$scroll_width(elem){
return elem.scrollWidth;
});
/**
 * Return, in pixels, the offset of `elem` relative to the top of the
 *   parent.
 */
lt.util.dom.offset_top = (function lt$util$dom$offset_top(elem){
return elem.offsetTop;
});
/**
 * Returns or sets the scrollTop value of `elem` depending on if `v` was
 *   provided.
 */
lt.util.dom.scroll_top = (function lt$util$dom$scroll_top(var_args){
var args__4777__auto__ = [];
var len__4771__auto___4922 = arguments.length;
var i__4772__auto___4923 = (0);
while(true){
if((i__4772__auto___4923 < len__4771__auto___4922)){
args__4777__auto__.push((arguments[i__4772__auto___4923]));

var G__4924 = (i__4772__auto___4923 + (1));
i__4772__auto___4923 = G__4924;
continue;
} else {
}
break;
}

var argseq__4778__auto__ = ((((1) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((1)),(0),null)):null);
return lt.util.dom.scroll_top.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4778__auto__);
});

(lt.util.dom.scroll_top.cljs$core$IFn$_invoke$arity$variadic = (function (elem,p__4918){
var vec__4919 = p__4918;
var v = cljs.core.nth.call(null,vec__4919,(0),null);
if(cljs.core.not.call(null,v)){
return elem.scrollTop;
} else {
return (elem.scrollTop = v);
}
}));

(lt.util.dom.scroll_top.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(lt.util.dom.scroll_top.cljs$lang$applyTo = (function (seq4916){
var G__4917 = cljs.core.first.call(null,seq4916);
var seq4916__$1 = cljs.core.next.call(null,seq4916);
var self__4758__auto__ = this;
return self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4917,seq4916__$1);
}));

/**
 * Return the `:top` style of `elem`.
 */
lt.util.dom.top = (function lt$util$dom$top(elem){
return lt.util.dom.css.call(null,elem,new cljs.core.Keyword(null,"top","top",-1856271961));
});
/**
 * Return the `:bottom` style of `elem`.
 */
lt.util.dom.bottom = (function lt$util$dom$bottom(elem){
return lt.util.dom.css.call(null,elem,new cljs.core.Keyword(null,"bottom","bottom",-1550509018));
});
/**
 * Return the `:left` style of `elem`.
 */
lt.util.dom.left = (function lt$util$dom$left(elem){
return lt.util.dom.css.call(null,elem,new cljs.core.Keyword(null,"left","left",-399115937));
});
/**
 * Return the `:right` style of `elem`.
 */
lt.util.dom.right = (function lt$util$dom$right(elem){
return lt.util.dom.css.call(null,elem,new cljs.core.Keyword(null,"right","right",-452581833));
});
/**
 * Return the inner HTML of `elem` or set the inner HTML to `h`.
 */
lt.util.dom.html = (function lt$util$dom$html(var_args){
var args__4777__auto__ = [];
var len__4771__auto___4931 = arguments.length;
var i__4772__auto___4932 = (0);
while(true){
if((i__4772__auto___4932 < len__4771__auto___4931)){
args__4777__auto__.push((arguments[i__4772__auto___4932]));

var G__4933 = (i__4772__auto___4932 + (1));
i__4772__auto___4932 = G__4933;
continue;
} else {
}
break;
}

var argseq__4778__auto__ = ((((1) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((1)),(0),null)):null);
return lt.util.dom.html.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4778__auto__);
});

(lt.util.dom.html.cljs$core$IFn$_invoke$arity$variadic = (function (elem,p__4927){
var vec__4928 = p__4927;
var h = cljs.core.nth.call(null,vec__4928,(0),null);
if(cljs.core.not.call(null,h)){
return elem.innerHTML;
} else {
return (elem.innerHTML = h);
}
}));

(lt.util.dom.html.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(lt.util.dom.html.cljs$lang$applyTo = (function (seq4925){
var G__4926 = cljs.core.first.call(null,seq4925);
var seq4925__$1 = cljs.core.next.call(null,seq4925);
var self__4758__auto__ = this;
return self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4926,seq4925__$1);
}));

/**
 * Convert `ev` to string.
 */
lt.util.dom.__GT_ev = (function lt$util$dom$__GT_ev(ev){
return cljs.core.name.call(null,ev);
});
/**
 * Trigger a HTMLEvents event named `ev` on `elem` with `opts` set on the
 *   event.
 */
lt.util.dom.trigger = (function lt$util$dom$trigger(var_args){
var args__4777__auto__ = [];
var len__4771__auto___4941 = arguments.length;
var i__4772__auto___4942 = (0);
while(true){
if((i__4772__auto___4942 < len__4771__auto___4941)){
args__4777__auto__.push((arguments[i__4772__auto___4942]));

var G__4943 = (i__4772__auto___4942 + (1));
i__4772__auto___4942 = G__4943;
continue;
} else {
}
break;
}

var argseq__4778__auto__ = ((((2) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((2)),(0),null)):null);
return lt.util.dom.trigger.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4778__auto__);
});

(lt.util.dom.trigger.cljs$core$IFn$_invoke$arity$variadic = (function (elem,ev,p__4937){
var vec__4938 = p__4937;
var opts = cljs.core.nth.call(null,vec__4938,(0),null);
var e = document.createEvent("HTMLEvents");
e.initEvent(cljs.core.name.call(null,ev),true,true);

(e.opts = opts);

return elem.dispatchEvent(e);
}));

(lt.util.dom.trigger.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(lt.util.dom.trigger.cljs$lang$applyTo = (function (seq4934){
var G__4935 = cljs.core.first.call(null,seq4934);
var seq4934__$1 = cljs.core.next.call(null,seq4934);
var G__4936 = cljs.core.first.call(null,seq4934__$1);
var seq4934__$2 = cljs.core.next.call(null,seq4934__$1);
var self__4758__auto__ = this;
return self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4935,G__4936,seq4934__$2);
}));

/**
 * Add event listener named `ev` on `elem` with callback function `cb`.
 */
lt.util.dom.on = (function lt$util$dom$on(elem,ev,cb){
return elem.addEventListener(lt.util.dom.__GT_ev.call(null,ev),cb);
});
/**
 * Remove event listener named `ev` on `elem` with callback function `cb`.
 */
lt.util.dom.off = (function lt$util$dom$off(elem,ev,cb){
return elem.removeEventListener(lt.util.dom.__GT_ev.call(null,ev),cb);
});
/**
 * Add multiple event listeners to `elem`.
 * 
 *   `evs` should be a map of the form `{:ev cb}` where `:ev` is the name and
 *   `cb` the callback function.
 */
lt.util.dom.on_STAR_ = (function lt$util$dom$on_STAR_(elem,evs){
var seq__4944 = cljs.core.seq.call(null,evs);
var chunk__4945 = null;
var count__4946 = (0);
var i__4947 = (0);
while(true){
if((i__4947 < count__4946)){
var vec__4954 = cljs.core._nth.call(null,chunk__4945,i__4947);
var ev = cljs.core.nth.call(null,vec__4954,(0),null);
var cb = cljs.core.nth.call(null,vec__4954,(1),null);
elem.addEventListener(lt.util.dom.__GT_ev.call(null,ev),cb);


var G__4960 = seq__4944;
var G__4961 = chunk__4945;
var G__4962 = count__4946;
var G__4963 = (i__4947 + (1));
seq__4944 = G__4960;
chunk__4945 = G__4961;
count__4946 = G__4962;
i__4947 = G__4963;
continue;
} else {
var temp__5753__auto__ = cljs.core.seq.call(null,seq__4944);
if(temp__5753__auto__){
var seq__4944__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__4944__$1)){
var c__4591__auto__ = cljs.core.chunk_first.call(null,seq__4944__$1);
var G__4964 = cljs.core.chunk_rest.call(null,seq__4944__$1);
var G__4965 = c__4591__auto__;
var G__4966 = cljs.core.count.call(null,c__4591__auto__);
var G__4967 = (0);
seq__4944 = G__4964;
chunk__4945 = G__4965;
count__4946 = G__4966;
i__4947 = G__4967;
continue;
} else {
var vec__4957 = cljs.core.first.call(null,seq__4944__$1);
var ev = cljs.core.nth.call(null,vec__4957,(0),null);
var cb = cljs.core.nth.call(null,vec__4957,(1),null);
elem.addEventListener(lt.util.dom.__GT_ev.call(null,ev),cb);


var G__4968 = cljs.core.next.call(null,seq__4944__$1);
var G__4969 = null;
var G__4970 = (0);
var G__4971 = (0);
seq__4944 = G__4968;
chunk__4945 = G__4969;
count__4946 = G__4970;
i__4947 = G__4971;
continue;
}
} else {
return null;
}
}
break;
}
});
/**
 * Return the active element of the document.
 * 
 *   An active element does not necessarily have focus, but an element with focus
 *   is always the active element in a document.
 */
lt.util.dom.active_element = (function lt$util$dom$active_element(){
return document.activeElement;
});
/**
 * Sets focus on `elem`.
 */
lt.util.dom.focus = (function lt$util$dom$focus(elem){
return elem.focus();
});
/**
 * Remove focus from `elem`.
 */
lt.util.dom.blur = (function lt$util$dom$blur(elem){
return elem.blur();
});
/**
 * Set the current selection range on `elem` with `start` and `stop` being the
 *   indexes which respectively contain the first and last characters of the
 *   selection.
 * 
 *   `dir` can be used to set the direction in which selection occurs.
 */
lt.util.dom.selection = (function lt$util$dom$selection(elem,start,stop,dir){
return elem.setSelectionRange(start,stop,dir);
});
/**
 * Create div containing `str` as inner HTML. Returns HTMLCollection of
 *   resulting div.
 * 
 *   See [[children]].
 */
lt.util.dom.make = (function lt$util$dom$make(str){
var d = document.createElement("div");
lt.util.dom.html.call(null,d,str);

return lt.util.dom.children.call(null,d);
});
/**
 * Returns the index of element `e`, which is where `e` is located inside of its
 *   parent's list of children, or -1 if there is no parent.
 */
lt.util.dom.index = (function lt$util$dom$index(e){
var p = lt.util.dom.parent.call(null,e);
var c = (cljs.core.truth_(p)?lt.util.dom.children.call(null,p):[]);
var len = c.length;
if(cljs.core.not.call(null,p)){
return (-1);
} else {
var i = (0);
while(true){
if((i >= len)){
return null;
} else {
if(cljs.core._EQ_.call(null,(c[i]),e)){
return i;
} else {
var G__4972 = (i + (1));
i = G__4972;
continue;
}
}
break;
}
}
});
/**
 * Trigger `func` when `:DOMContentLoaded` fires on the document.
 */
lt.util.dom.ready = (function lt$util$dom$ready(func){
return lt.util.dom.on.call(null,document,new cljs.core.Keyword(null,"DOMContentLoaded","DOMContentLoaded",88046845),func);
});
/**
 * Create and return a document fragment with `items` appended to it as
 *   children.
 */
lt.util.dom.fragment = (function lt$util$dom$fragment(items){
var frag = document.createDocumentFragment();
var seq__4973_4977 = cljs.core.seq.call(null,items);
var chunk__4974_4978 = null;
var count__4975_4979 = (0);
var i__4976_4980 = (0);
while(true){
if((i__4976_4980 < count__4975_4979)){
var i_4981 = cljs.core._nth.call(null,chunk__4974_4978,i__4976_4980);
frag.appendChild(i_4981);


var G__4982 = seq__4973_4977;
var G__4983 = chunk__4974_4978;
var G__4984 = count__4975_4979;
var G__4985 = (i__4976_4980 + (1));
seq__4973_4977 = G__4982;
chunk__4974_4978 = G__4983;
count__4975_4979 = G__4984;
i__4976_4980 = G__4985;
continue;
} else {
var temp__5753__auto___4986 = cljs.core.seq.call(null,seq__4973_4977);
if(temp__5753__auto___4986){
var seq__4973_4987__$1 = temp__5753__auto___4986;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__4973_4987__$1)){
var c__4591__auto___4988 = cljs.core.chunk_first.call(null,seq__4973_4987__$1);
var G__4989 = cljs.core.chunk_rest.call(null,seq__4973_4987__$1);
var G__4990 = c__4591__auto___4988;
var G__4991 = cljs.core.count.call(null,c__4591__auto___4988);
var G__4992 = (0);
seq__4973_4977 = G__4989;
chunk__4974_4978 = G__4990;
count__4975_4979 = G__4991;
i__4976_4980 = G__4992;
continue;
} else {
var i_4993 = cljs.core.first.call(null,seq__4973_4987__$1);
frag.appendChild(i_4993);


var G__4994 = cljs.core.next.call(null,seq__4973_4987__$1);
var G__4995 = null;
var G__4996 = (0);
var G__4997 = (0);
seq__4973_4977 = G__4994;
chunk__4974_4978 = G__4995;
count__4975_4979 = G__4996;
i__4976_4980 = G__4997;
continue;
}
} else {
}
}
break;
}

return frag;
});
