// Compiled by ClojureScript 1.10.844 {}
goog.provide('lt.util.ipc');
goog.require('cljs.core');
/**
 * Provides access to the ipc renderer.
 */
lt.util.ipc.ipc = require("electron").ipcRenderer;
if(cljs.core.truth_((process.env["IPC_DEBUG"]))){
var old_send_6632 = lt.util.ipc.transport;
var old_on_6633 = lt.util.ipc.start;
/**
 * @param {...*} var_args
 */
lt.util.ipc.transport = (function() { 
var lt$util$ipc$transport__delegate = function (args){
cljs.core.prn.call(null,"RENDERER->",args);

return cljs.core.apply.call(null,old_send_6632,args);
};
var lt$util$ipc$transport = function (var_args){
var args = null;
if (arguments.length > 0) {
var G__6634__i = 0, G__6634__a = new Array(arguments.length -  0);
while (G__6634__i < G__6634__a.length) {G__6634__a[G__6634__i] = arguments[G__6634__i + 0]; ++G__6634__i;}
  args = new cljs.core.IndexedSeq(G__6634__a,0,null);
} 
return lt$util$ipc$transport__delegate.call(this,args);};
lt$util$ipc$transport.cljs$lang$maxFixedArity = 0;
lt$util$ipc$transport.cljs$lang$applyTo = (function (arglist__6635){
var args = cljs.core.seq(arglist__6635);
return lt$util$ipc$transport__delegate(args);
});
lt$util$ipc$transport.cljs$core$IFn$_invoke$arity$variadic = lt$util$ipc$transport__delegate;
return lt$util$ipc$transport;
})()
;

lt.util.ipc.start = (function lt$util$ipc$start(channel,cb){
return old_on_6633.call(null,channel,(function() { 
var G__6636__delegate = function (_,args){
cljs.core.prn.call(null,"->RENDERER",channel,args);

return cljs.core.apply.call(null,cb,args);
};
var G__6636 = function (_,var_args){
var args = null;
if (arguments.length > 1) {
var G__6637__i = 0, G__6637__a = new Array(arguments.length -  1);
while (G__6637__i < G__6637__a.length) {G__6637__a[G__6637__i] = arguments[G__6637__i + 1]; ++G__6637__i;}
  args = new cljs.core.IndexedSeq(G__6637__a,0,null);
} 
return G__6636__delegate.call(this,_,args);};
G__6636.cljs$lang$maxFixedArity = 1;
G__6636.cljs$lang$applyTo = (function (arglist__6638){
var _ = cljs.core.first(arglist__6638);
var args = cljs.core.rest(arglist__6638);
return G__6636__delegate(_,args);
});
G__6636.cljs$core$IFn$_invoke$arity$variadic = G__6636__delegate;
return G__6636;
})()
);
});
} else {
}
/**
 * Delegates to ipc.send, which asynchronously sends args to the browser process's channel.
 */
lt.util.ipc.send = (function lt$util$ipc$send(var_args){
var args__4777__auto__ = [];
var len__4771__auto___6641 = arguments.length;
var i__4772__auto___6642 = (0);
while(true){
if((i__4772__auto___6642 < len__4771__auto___6641)){
args__4777__auto__.push((arguments[i__4772__auto___6642]));

var G__6643 = (i__4772__auto___6642 + (1));
i__4772__auto___6642 = G__6643;
continue;
} else {
}
break;
}

var argseq__4778__auto__ = ((((1) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((1)),(0),null)):null);
return lt.util.ipc.send.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4778__auto__);
});

(lt.util.ipc.send.cljs$core$IFn$_invoke$arity$variadic = (function (channel,args){
return cljs.core.apply.call(null,lt.util.ipc.ipc.send,channel,cljs.core.clj__GT_js.call(null,args));
}));

(lt.util.ipc.send.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(lt.util.ipc.send.cljs$lang$applyTo = (function (seq6639){
var G__6640 = cljs.core.first.call(null,seq6639);
var seq6639__$1 = cljs.core.next.call(null,seq6639);
var self__4758__auto__ = this;
return self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__6640,seq6639__$1);
}));

/**
 * Delegates to ipc.on, which defines a callback to fire for the given channel.
 */
lt.util.ipc.on = (function lt$util$ipc$on(channel,cb){
return lt.util.ipc.ipc.on(channel,cb);
});
