// Compiled by ClojureScript 1.10.844 {}
goog.provide('lt.objs.keyboard');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('lt.object');
goog.require('lt.objs.app');
goog.require('lt.objs.command');
goog.require('lt.objs.platform');
goog.require('lt.objs.metrics');
goog.require('lt.objs.context');
goog.require('lt.util.js');
goog.require('lt.util.events');
lt.objs.keyboard.capturing_QMARK_ = true;
lt.objs.keyboard.keys = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
lt.objs.keyboard.key_map = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
lt.objs.keyboard.chords = (function (){var obj7748 = ({"current":null,"chords":cljs.core.PersistentHashSet.EMPTY});
return obj7748;
})();
lt.objs.keyboard.chord_timeout = (1000);
lt.objs.keyboard.activity = (function lt$objs$keyboard$activity(){
return lt.objs.metrics.used_BANG_.call(null);
});
lt.objs.keyboard.chord_variants = (function lt$objs$keyboard$chord_variants(k){
var splits = cljs.core.butlast.call(null,clojure.string.split.call(null,k," "));
return cljs.core.reduce.call(null,(function (res,cur){
return cljs.core.conj.call(null,res,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null,res))," ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cur)].join(''));
}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null,splits)], null),cljs.core.rest.call(null,splits));
});
lt.objs.keyboard.extract_chords = (function lt$objs$keyboard$extract_chords(ks){
return cljs.core.reduce.call(null,(function (chords,p__7749){
var vec__7750 = p__7749;
var k = cljs.core.nth.call(null,vec__7750,(0),null);
var _ = cljs.core.nth.call(null,vec__7750,(1),null);
if((!((k.indexOf(" ") > (-1))))){
return chords;
} else {
return cljs.core.apply.call(null,cljs.core.conj,chords,lt.objs.keyboard.chord_variants.call(null,k));
}
}),cljs.core.PersistentHashSet.EMPTY,ks);
});
lt.objs.keyboard.merge_keys = (function lt$objs$keyboard$merge_keys(ctx){
var ctx_set = lt.object.specificity_sort.call(null,ctx,new cljs.core.Keyword(null,"down","down",1565245570));
var ks = cljs.core.deref.call(null,lt.objs.keyboard.keys);
var neue = cljs.core.apply.call(null,cljs.core.merge,cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.call(null,ks,ctx_set));
(lt.objs.keyboard.chords = (function (){var obj7754 = ({"current":null,"chords":lt.objs.keyboard.extract_chords.call(null,neue)});
return obj7754;
})());

cljs.core.reset_BANG_.call(null,lt.objs.keyboard.key_map,neue);

return lt.object.raise.call(null,lt.objs.app.app,new cljs.core.Keyword(null,"app.keys.change","app.keys.change",-1550653341));
});
lt.objs.keyboard.refresh = (function lt$objs$keyboard$refresh(){
return lt.objs.keyboard.merge_keys.call(null,lt.objs.context.current.call(null));
});
cljs.core.add_watch.call(null,lt.objs.context.contexts,new cljs.core.Keyword(null,"commands2","commands2",-1647159261),(function (_,___$1,___$2,ctx){
return lt.objs.keyboard.merge_keys.call(null,ctx);
}));
lt.objs.keyboard.refresh.call(null);
lt.objs.keyboard.__GT_keystr = (function lt$objs$keyboard$__GT_keystr(key,ev){
return [(cljs.core.truth_(ev.ctrlKey)?"ctrl-":null),(cljs.core.truth_(ev.metaKey)?((lt.objs.platform.mac_QMARK_.call(null))?"cmd-":"meta-"):null),(cljs.core.truth_(ev.altKey)?"alt-":null),(cljs.core.truth_(ev.altGraphKey)?"altgr-":null),(cljs.core.truth_(ev.shiftKey)?"shift-":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4160__auto__ = key;
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
return "";
}
})().toLowerCase())].join('');
});
lt.objs.keyboard.chord_BAR_mapping = (function lt$objs$keyboard$chord_BAR_mapping(key,char$,ev){
var current = (lt.objs.keyboard.chords["current"]);
var cur_chords = (lt.objs.keyboard.chords["chords"]);
var vec__7755 = (cljs.core.truth_(current)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(current)," ",lt.objs.keyboard.__GT_keystr.call(null,key,ev)].join(''),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(current)," ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(char$)].join('')], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lt.objs.keyboard.__GT_keystr.call(null,key,ev),char$], null));
var ks = cljs.core.nth.call(null,vec__7755,(0),null);
var ch = cljs.core.nth.call(null,vec__7755,(1),null);
var temp__5751__auto__ = (function (){var or__4160__auto__ = cur_chords.call(null,ch);
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
return cur_chords.call(null,ks);
}
})();
if(cljs.core.truth_(temp__5751__auto__)){
var chord = temp__5751__auto__;
(lt.objs.keyboard.chords["current"] = chord);

if(cljs.core.truth_(lt.objs.keyboard.chord_timeout)){
lt.util.js.wait.call(null,lt.objs.keyboard.chord_timeout,(function (){
return (lt.objs.keyboard.chords["current"] = null);
}));
} else {
}

return cljs.core.PersistentVector.EMPTY;
} else {
(lt.objs.keyboard.chords["current"] = null);

var or__4160__auto__ = cljs.core.deref.call(null,lt.objs.keyboard.key_map).call(null,ch);
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
var or__4160__auto____$1 = cljs.core.deref.call(null,lt.objs.keyboard.key_map).call(null,ks);
if(cljs.core.truth_(or__4160__auto____$1)){
return or__4160__auto____$1;
} else {
if(cljs.core.truth_(current)){
return cljs.core.PersistentVector.EMPTY;
} else {
return null;
}
}
}
}
});
lt.objs.keyboard._STAR_capture_STAR_ = true;
lt.objs.keyboard._STAR_stop_STAR_ = false;
lt.objs.keyboard.passthrough = (function lt$objs$keyboard$passthrough(){
return (lt.objs.keyboard._STAR_capture_STAR_ = false);
});
/**
 * Called to prevent commands after the current one from firing
 */
lt.objs.keyboard.stop_commands_BANG_ = (function lt$objs$keyboard$stop_commands_BANG_(){
return (lt.objs.keyboard._STAR_stop_STAR_ = true);
});
lt.objs.keyboard.disable = (function lt$objs$keyboard$disable(){
return (lt.objs.keyboard.capturing_QMARK_ = false);
});
lt.objs.keyboard.enable = (function lt$objs$keyboard$enable(){
return (lt.objs.keyboard.capturing_QMARK_ = true);
});
lt.objs.keyboard.all_mappings = (function lt$objs$keyboard$all_mappings(key){
return cljs.core.reduce.call(null,(function (res,p__7758){
var vec__7759 = p__7758;
var ctx = cljs.core.nth.call(null,vec__7759,(0),null);
var keys = cljs.core.nth.call(null,vec__7759,(1),null);
if(cljs.core.not.call(null,keys.call(null,key))){
return res;
} else {
return cljs.core.conj.call(null,res,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctx,keys.call(null,key)], null));
}
}),cljs.core.PersistentVector.EMPTY,cljs.core.deref.call(null,lt.objs.keyboard.keys));
});
lt.objs.keyboard.trigger = (function lt$objs$keyboard$trigger(cmd){
lt.objs.keyboard.activity.call(null);

if(cljs.core.coll_QMARK_.call(null,cmd)){
cljs.core.apply.call(null,lt.objs.command.exec_BANG_,cmd);
} else {
lt.objs.command.exec_BANG_.call(null,cmd);
}

return lt.objs.keyboard._STAR_capture_STAR_;
});
lt.objs.keyboard.capture = (function lt$objs$keyboard$capture(key,char$,ev){
lt.objs.keyboard.activity.call(null);

var _STAR_capture_STAR__orig_val__7762 = lt.objs.keyboard._STAR_capture_STAR_;
var _STAR_stop_STAR__orig_val__7763 = lt.objs.keyboard._STAR_stop_STAR_;
var _STAR_capture_STAR__temp_val__7764 = true;
var _STAR_stop_STAR__temp_val__7765 = false;
(lt.objs.keyboard._STAR_capture_STAR_ = _STAR_capture_STAR__temp_val__7764);

(lt.objs.keyboard._STAR_stop_STAR_ = _STAR_stop_STAR__temp_val__7765);

try{var temp__5753__auto__ = lt.objs.keyboard.chord_BAR_mapping.call(null,key,char$,ev);
if(cljs.core.truth_(temp__5753__auto__)){
var cs = temp__5753__auto__;
var seq__7766_7770 = cljs.core.seq.call(null,cs);
var chunk__7767_7771 = null;
var count__7768_7772 = (0);
var i__7769_7773 = (0);
while(true){
if((i__7769_7773 < count__7768_7772)){
var c_7774 = cljs.core._nth.call(null,chunk__7767_7771,i__7769_7773);
if(cljs.core.truth_(lt.objs.keyboard._STAR_stop_STAR_)){
} else {
(lt.objs.keyboard._STAR_capture_STAR_ = true);

lt.objs.keyboard.trigger.call(null,c_7774);
}


var G__7775 = seq__7766_7770;
var G__7776 = chunk__7767_7771;
var G__7777 = count__7768_7772;
var G__7778 = (i__7769_7773 + (1));
seq__7766_7770 = G__7775;
chunk__7767_7771 = G__7776;
count__7768_7772 = G__7777;
i__7769_7773 = G__7778;
continue;
} else {
var temp__5753__auto___7779__$1 = cljs.core.seq.call(null,seq__7766_7770);
if(temp__5753__auto___7779__$1){
var seq__7766_7780__$1 = temp__5753__auto___7779__$1;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__7766_7780__$1)){
var c__4591__auto___7781 = cljs.core.chunk_first.call(null,seq__7766_7780__$1);
var G__7782 = cljs.core.chunk_rest.call(null,seq__7766_7780__$1);
var G__7783 = c__4591__auto___7781;
var G__7784 = cljs.core.count.call(null,c__4591__auto___7781);
var G__7785 = (0);
seq__7766_7770 = G__7782;
chunk__7767_7771 = G__7783;
count__7768_7772 = G__7784;
i__7769_7773 = G__7785;
continue;
} else {
var c_7786 = cljs.core.first.call(null,seq__7766_7780__$1);
if(cljs.core.truth_(lt.objs.keyboard._STAR_stop_STAR_)){
} else {
(lt.objs.keyboard._STAR_capture_STAR_ = true);

lt.objs.keyboard.trigger.call(null,c_7786);
}


var G__7787 = cljs.core.next.call(null,seq__7766_7780__$1);
var G__7788 = null;
var G__7789 = (0);
var G__7790 = (0);
seq__7766_7770 = G__7787;
chunk__7767_7771 = G__7788;
count__7768_7772 = G__7789;
i__7769_7773 = G__7790;
continue;
}
} else {
}
}
break;
}

return lt.objs.keyboard._STAR_capture_STAR_;
} else {
return null;
}
}finally {(lt.objs.keyboard._STAR_stop_STAR_ = _STAR_stop_STAR__orig_val__7763);

(lt.objs.keyboard._STAR_capture_STAR_ = _STAR_capture_STAR__orig_val__7762);
}});
lt.objs.keyboard.capture_up = (function lt$objs$keyboard$capture_up(key,char$,ev){
var or__4160__auto__ = cljs.core.deref.call(null,lt.objs.keyboard.key_map).call(null,char$);
if(cljs.core.truth_(or__4160__auto__)){
return or__4160__auto__;
} else {
return cljs.core.deref.call(null,lt.objs.keyboard.key_map).call(null,lt.objs.keyboard.__GT_keystr.call(null,key,ev));
}
});
lt.objs.keyboard.meta = ((lt.objs.platform.mac_QMARK_.call(null))?"cmd":"ctrl");
lt.objs.keyboard.cmd__GT_bindings = (function lt$objs$keyboard$cmd__GT_bindings(cmd){
return cljs.core.filter.call(null,(function (p1__7791_SHARP_){
return cljs.core.seq.call(null,cljs.core.second.call(null,p1__7791_SHARP_));
}),(function (){var iter__4564__auto__ = (function lt$objs$keyboard$cmd__GT_bindings_$_iter__7793(s__7794){
return (new cljs.core.LazySeq(null,(function (){
var s__7794__$1 = s__7794;
while(true){
var temp__5753__auto__ = cljs.core.seq.call(null,s__7794__$1);
if(temp__5753__auto__){
var s__7794__$2 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,s__7794__$2)){
var c__4562__auto__ = cljs.core.chunk_first.call(null,s__7794__$2);
var size__4563__auto__ = cljs.core.count.call(null,c__4562__auto__);
var b__7796 = cljs.core.chunk_buffer.call(null,size__4563__auto__);
if((function (){var i__7795 = (0);
while(true){
if((i__7795 < size__4563__auto__)){
var vec__7797 = cljs.core._nth.call(null,c__4562__auto__,i__7795);
var ctx = cljs.core.nth.call(null,vec__7797,(0),null);
var ms = cljs.core.nth.call(null,vec__7797,(1),null);
cljs.core.chunk_append.call(null,b__7796,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctx,cljs.core.first.call(null,cljs.core.first.call(null,cljs.core.filter.call(null,((function (i__7795,vec__7797,ctx,ms,c__4562__auto__,size__4563__auto__,b__7796,s__7794__$2,temp__5753__auto__){
return (function (p1__7792_SHARP_){
return cljs.core._EQ_.call(null,cljs.core.first.call(null,cljs.core.second.call(null,p1__7792_SHARP_)),cmd);
});})(i__7795,vec__7797,ctx,ms,c__4562__auto__,size__4563__auto__,b__7796,s__7794__$2,temp__5753__auto__))
,ms)))], null));

var G__7803 = (i__7795 + (1));
i__7795 = G__7803;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__7796),lt$objs$keyboard$cmd__GT_bindings_$_iter__7793.call(null,cljs.core.chunk_rest.call(null,s__7794__$2)));
} else {
return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__7796),null);
}
} else {
var vec__7800 = cljs.core.first.call(null,s__7794__$2);
var ctx = cljs.core.nth.call(null,vec__7800,(0),null);
var ms = cljs.core.nth.call(null,vec__7800,(1),null);
return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctx,cljs.core.first.call(null,cljs.core.first.call(null,cljs.core.filter.call(null,((function (vec__7800,ctx,ms,s__7794__$2,temp__5753__auto__){
return (function (p1__7792_SHARP_){
return cljs.core._EQ_.call(null,cljs.core.first.call(null,cljs.core.second.call(null,p1__7792_SHARP_)),cmd);
});})(vec__7800,ctx,ms,s__7794__$2,temp__5753__auto__))
,ms)))], null),lt$objs$keyboard$cmd__GT_bindings_$_iter__7793.call(null,cljs.core.rest.call(null,s__7794__$2)));
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__4564__auto__.call(null,cljs.core.deref.call(null,lt.objs.keyboard.keys));
})());
});
lt.objs.keyboard.cmd__GT_current_binding = (function lt$objs$keyboard$cmd__GT_current_binding(cmd){
return cljs.core.first.call(null,cljs.core.filter.call(null,(function (p1__7804_SHARP_){
return cljs.core.set.call(null,cljs.core.second.call(null,p1__7804_SHARP_)).call(null,cmd);
}),cljs.core.deref.call(null,lt.objs.keyboard.key_map)));
});
(Mousetrap.prototype.handleKey = (function (key,char$,ev){
if(cljs.core.truth_(((lt.objs.keyboard.capturing_QMARK_)?((typeof key === 'string')?lt.objs.keyboard.capture.call(null,key,char$,ev):false):false))){
ev.preventDefault();

return ev.stopPropagation();
} else {
return null;
}
}));
(Mousetrap.prototype.handleKeyUp = (function (key,char$,ev){
if(cljs.core.truth_(((lt.objs.keyboard.capturing_QMARK_)?((typeof key === 'string')?lt.objs.keyboard.capture_up.call(null,key,char$,ev):false):false))){
ev.preventDefault();

return ev.stopPropagation();
} else {
return null;
}
}));
/**
 * 
 */
lt.objs.keyboard.__BEH__chord_timeout = (function lt$objs$keyboard$__BEH__chord_timeout(this$,timeout){
return (lt.objs.keyboard.chord_timeout = timeout);
});

lt.object.behavior_STAR_.call(null,new cljs.core.Keyword("lt.objs.keyboard","chord-timeout","lt.objs.keyboard/chord-timeout",657273159),new cljs.core.Keyword(null,"desc","desc",2093485764),"App: Set the timeout for chorded shortcuts",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"user","user",1532431356),new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"object.instant","object.instant",-29936727),null], null), null),new cljs.core.Keyword(null,"reaction","reaction",490869788),lt.objs.keyboard.__BEH__chord_timeout);
