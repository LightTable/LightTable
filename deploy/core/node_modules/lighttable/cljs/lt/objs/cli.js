// Compiled by ClojureScript 1.10.844 {}
goog.provide('lt.objs.cli');
goog.require('cljs.core');
goog.require('lt.object');
goog.require('lt.objs.app');
goog.require('lt.objs.files');
goog.require('lt.objs.workspace');
goog.require('lt.objs.command');
goog.require('clojure.string');
goog.require('lt.util.ipc');
goog.require('lt.objs.opener');
lt.objs.cli.remote = require("electron").remote;
lt.objs.cli.open_paths = (function lt$objs$cli$open_paths(path_line_pairs,add_QMARK_){
var seq__9947 = cljs.core.seq.call(null,path_line_pairs);
var chunk__9949 = null;
var count__9950 = (0);
var i__9951 = (0);
while(true){
if((i__9951 < count__9950)){
var vec__9959 = cljs.core._nth.call(null,chunk__9949,i__9951);
var path = cljs.core.nth.call(null,vec__9959,(0),null);
var line = cljs.core.nth.call(null,vec__9959,(1),null);
if(cljs.core.not_EQ_.call(null,path,process.execPath)){
if(cljs.core.truth_(lt.objs.files.exists_QMARK_.call(null,path))){
if(cljs.core.truth_(lt.objs.files.dir_QMARK_.call(null,path))){
lt.object.raise.call(null,lt.objs.workspace.current_ws,new cljs.core.Keyword(null,"add.folder!","add.folder!",755480535),path);
} else {
lt.object.raise.call(null,lt.objs.opener.opener,new cljs.core.Keyword(null,"open!","open!",1145596908),path);

if(cljs.core.truth_(line)){
lt.objs.command.exec_BANG_.call(null,new cljs.core.Keyword(null,"go-to-line","go-to-line",-880192345),line);
} else {
}

if(cljs.core.truth_(add_QMARK_)){
lt.object.raise.call(null,lt.objs.workspace.current_ws,new cljs.core.Keyword(null,"add.file!","add.file!",-439765985),path);
} else {
}
}
} else {
lt.object.raise.call(null,lt.objs.opener.opener,new cljs.core.Keyword(null,"new!","new!",-1640547457),path);
}


var G__9965 = seq__9947;
var G__9966 = chunk__9949;
var G__9967 = count__9950;
var G__9968 = (i__9951 + (1));
seq__9947 = G__9965;
chunk__9949 = G__9966;
count__9950 = G__9967;
i__9951 = G__9968;
continue;
} else {
var G__9969 = seq__9947;
var G__9970 = chunk__9949;
var G__9971 = count__9950;
var G__9972 = (i__9951 + (1));
seq__9947 = G__9969;
chunk__9949 = G__9970;
count__9950 = G__9971;
i__9951 = G__9972;
continue;
}
} else {
var temp__5753__auto__ = cljs.core.seq.call(null,seq__9947);
if(temp__5753__auto__){
var seq__9947__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__9947__$1)){
var c__4591__auto__ = cljs.core.chunk_first.call(null,seq__9947__$1);
var G__9973 = cljs.core.chunk_rest.call(null,seq__9947__$1);
var G__9974 = c__4591__auto__;
var G__9975 = cljs.core.count.call(null,c__4591__auto__);
var G__9976 = (0);
seq__9947 = G__9973;
chunk__9949 = G__9974;
count__9950 = G__9975;
i__9951 = G__9976;
continue;
} else {
var vec__9962 = cljs.core.first.call(null,seq__9947__$1);
var path = cljs.core.nth.call(null,vec__9962,(0),null);
var line = cljs.core.nth.call(null,vec__9962,(1),null);
if(cljs.core.not_EQ_.call(null,path,process.execPath)){
if(cljs.core.truth_(lt.objs.files.exists_QMARK_.call(null,path))){
if(cljs.core.truth_(lt.objs.files.dir_QMARK_.call(null,path))){
lt.object.raise.call(null,lt.objs.workspace.current_ws,new cljs.core.Keyword(null,"add.folder!","add.folder!",755480535),path);
} else {
lt.object.raise.call(null,lt.objs.opener.opener,new cljs.core.Keyword(null,"open!","open!",1145596908),path);

if(cljs.core.truth_(line)){
lt.objs.command.exec_BANG_.call(null,new cljs.core.Keyword(null,"go-to-line","go-to-line",-880192345),line);
} else {
}

if(cljs.core.truth_(add_QMARK_)){
lt.object.raise.call(null,lt.objs.workspace.current_ws,new cljs.core.Keyword(null,"add.file!","add.file!",-439765985),path);
} else {
}
}
} else {
lt.object.raise.call(null,lt.objs.opener.opener,new cljs.core.Keyword(null,"new!","new!",-1640547457),path);
}


var G__9977 = cljs.core.next.call(null,seq__9947__$1);
var G__9978 = null;
var G__9979 = (0);
var G__9980 = (0);
seq__9947 = G__9977;
chunk__9949 = G__9978;
count__9950 = G__9979;
i__9951 = G__9980;
continue;
} else {
var G__9981 = cljs.core.next.call(null,seq__9947__$1);
var G__9982 = null;
var G__9983 = (0);
var G__9984 = (0);
seq__9947 = G__9981;
chunk__9949 = G__9982;
count__9950 = G__9983;
i__9951 = G__9984;
continue;
}
}
} else {
return null;
}
}
break;
}
});
/**
 * Map of commandline options parsed by yargs
 */
lt.objs.cli.parsed_args = cljs.core.js__GT_clj.call(null,lt.objs.cli.remote.getGlobal("browserParsedArgs"),new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",1310784252),true);
/**
 * Files to open from a file manager
 */
lt.objs.cli.open_files = cljs.core.js__GT_clj.call(null,lt.objs.cli.remote.getGlobal("browserOpenFiles"));
/**
 * Arguments used to start LightTable
 */
lt.objs.cli.argv = cljs.core.js__GT_clj.call(null,lt.objs.cli.remote.process.argv);
lt.util.ipc.on.call(null,"openFileAfterStartup",(function (p1__9985_SHARP_){
return lt.object.raise.call(null,lt.objs.app.app,new cljs.core.Keyword(null,"open!","open!",1145596908),p1__9985_SHARP_);
}));
/**
 * Returns path arguments passed to executable or nil if none given. Only returns
 *   on first window since subsequent windows don't open path arguments.
 */
lt.objs.cli.args = (function lt$objs$cli$args(){
return ((lt.objs.app.first_window_QMARK_.call(null)) && (((cljs.core.seq.call(null,lt.objs.cli.open_files)) || (cljs.core.seq.call(null,(cljs.core.truth_(process.env.LT_DEV_CLI)?cljs.core.subvec.call(null,lt.objs.cli.argv,(2)):cljs.core.rest.call(null,lt.objs.cli.argv)))))));
});
/**
 * 
 */
lt.objs.cli.__BEH__open_on_args = (function lt$objs$cli$__BEH__open_on_args(this$){
if(lt.objs.app.first_window_QMARK_.call(null)){
var path_line_pairs = cljs.core.map.call(null,(function (p1__9986_SHARP_){
var vec__9987 = cljs.core.re_find.call(null,/^(.*?):?(\d+)?$/,p1__9986_SHARP_);
var _ = cljs.core.nth.call(null,vec__9987,(0),null);
var path = cljs.core.nth.call(null,vec__9987,(1),null);
var line = cljs.core.nth.call(null,vec__9987,(2),null);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lt.objs.files.resolve.call(null,lt.objs.files.cwd,path),line], null);
}),lt.objs.cli.args.call(null));
var paths = cljs.core.map.call(null,cljs.core.first,path_line_pairs);
var open_dir_QMARK_ = cljs.core.some.call(null,lt.objs.files.dir_QMARK_,paths);
if(cljs.core.truth_(open_dir_QMARK_)){
lt.object.merge_BANG_.call(null,lt.objs.workspace.current_ws,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"initialized?","initialized?",1707939066),true], null));

lt.objs.command.exec_BANG_.call(null,new cljs.core.Keyword(null,"workspace.show","workspace.show",-1449362332));
} else {
}

return lt.objs.cli.open_paths.call(null,path_line_pairs,new cljs.core.Keyword(null,"add","add",235287739).cljs$core$IFn$_invoke$arity$1(lt.objs.cli.parsed_args));
} else {
return null;
}
});

lt.object.behavior_STAR_.call(null,new cljs.core.Keyword("lt.objs.cli","open-on-args","lt.objs.cli/open-on-args",-1043868468),new cljs.core.Keyword(null,"desc","desc",2093485764),"App: Process commandline or file manager arguments",new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"post-init","post-init",1539646468),null], null), null),new cljs.core.Keyword(null,"reaction","reaction",490869788),lt.objs.cli.__BEH__open_on_args);
/**
 * 
 */
lt.objs.cli.__BEH__open_BANG_ = (function lt$objs$cli$__BEH__open_BANG_(this$,path){
if(cljs.core._EQ_.call(null,lt.objs.app.fetch.call(null,new cljs.core.Keyword(null,"focusedWindow","focusedWindow",-121610640)),lt.objs.app.window_number.call(null))){
return lt.objs.cli.open_paths.call(null,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null)], null),new cljs.core.Keyword(null,"add","add",235287739).cljs$core$IFn$_invoke$arity$1(lt.objs.cli.parsed_args));
} else {
return null;
}
});

lt.object.behavior_STAR_.call(null,new cljs.core.Keyword("lt.objs.cli","open!","lt.objs.cli/open!",690477088),new cljs.core.Keyword(null,"desc","desc",2093485764),"App: Open path(s) from a file manager after startup",new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"open!","open!",1145596908),null], null), null),new cljs.core.Keyword(null,"reaction","reaction",490869788),lt.objs.cli.__BEH__open_BANG_);
